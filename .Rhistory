x$var2>8
X$var2>8
which(X$var2>8)
X[X$var2>8]
X[which(X$var2>8)]
X[which(X$var2>8),]
X
rnorm(5)
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/ros.csv?accessType=DOWNLOAD"
getwd()
download.file(fileUrl,destfile="restaurants.csv",method="curl")
restData<-read.csv("restaurants.csv")
head restData
head(restData)
restData
fileUrl
fileUrl<-"https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="restaurants.csv",method="curl")
restData<-read.csv("restaurants.csv")
head(restData)
names(restData)
summary(restaData)
summary(restData)
str(restData)
head(restData)
nrow(restData)
view(restData)
View(restData)
getwd()
R.home()
head restData
head(restData)
restData[,c("name","zipCode")]
restData[,c('name','zipCode')]
R.home()
factor(c('one','two'))
factor(c('one','two','three','four'))
library(xts)
install.packages("xts")
install.packages("rattle")
install.packages("quantmod")
install.packages("RSocrata")
restData <- read.socrata("http://data.baltimorecity.gov/resource/k5ry-ef3g.json")
library(Rsocrata)
library(Rsocrata)
library(socrata)
library(RSocrata)
restData <- read.socrata("http://data.baltimorecity.gov/resource/k5ry-ef3g.json")
head restData
head(restData)
restData <- read.socrata("http://data.baltimorecity.gov/resource/k5ry-ef3g.csv")
head(restData)
nrow(restData)
t(apply(restData,2,table))
restData[`name`zipCode]
restData[c('name','zipCode')]
names(restData)
restData[names(restData)]
head(restData)
install.packages("rggobi")
install.packages("iplots")
socrata <- read.socrata('http://opendata.socrata.com/resource/6wk3-4ija.csv')
socrata
socrata <- read.socrata('http://opendata.socrata.com/resource/6wk3-4ija.json')
head(restData)
socrata <- read.socrata('http://opendata.socrata.com/resource/6wk3-4ija.csv')
head(socrata)
names(socrata)
socrata["Open.Data.Site.URL"]
head(socrata["Open.Data.Site.URL"])
nrow(socrata["Open.Data.Site.URL"])
View(socrata["Open.Data.Site.URL"])
library(httr)
pg2=GET('http://httpin.org/basic-auth/user/passwd',authenticate('user','passwd'))
pg2
names(pg2)
content(pg2)
content2 = content(pg2,as='text')
parsedHtml = htmlParse(content2,asText=T)
library(XML)
parsedHtml = htmlParse(content2,asText=T)
xpathSApply(parsedHtml,"//headers", xmlValue)
install.packages("Rook")
library(Rsocrata)
library(RSocrata)
read.socrata("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv","ss06hid.csv")
library(Rcurl)
install.packages("RCurl")
library(RCurl)
x <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
y<- read.csv(text = x)
which(y$ACR==3 & y$AGS == 6)
library(jpeg)
install.packages("jpeg")
jpeg
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",z,mode="wb")
z<-tempfile()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",z,mode="wb")
x <- getURL("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
myurl <-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z<-tempfile()
download.file(myurl,z,mode="wb")
myurl <-"http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(myurl,z,mode="wb")
library(jpeg)
img<-readJPEG(system.file("img",z,package="jpeg"))
img<-readJPEG(system.file("img","z",package="jpeg"))
getwd()
download.file(myurl,z,mode="wb")
ls()
z
img<-readJPEG(system.file("img","/tmp/RtmpO21XOe/file263867f133d0",package="jpeg"),T)
download.file(myurl,jeff.jpg,mode="wb")
?download.file
??download.file
myurl <-"http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(myurl,"jeff.jpg",mode="wb")
img<-readJPEG(system.file("img","jeff.jpg",package="jpeg"),T)
library(jpeg)
img<-readJPEG(system.file("img","jeff.jpg",package="jpeg"),T)
sessionInfo()
getwd()
list.files()
file.info("jeff.jpg")
file.info(list.files(getwd(),full.names=TRUE))
img<-readJPEG("jeff.jpg",NATIVE=TRUE)
img<-readJPEG("jeff.jpg",native=TRUE)
summary(img)
head(img)
quantile(img,prob-0.1)
quantile(img,probs=0.1)
quantile(img,probs=0.3)
quantile(img,probs=0.8)
-15258512-638
quantile(img,probs=c(0.3,0.80)
)
fileAddress <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileAddress, "data/FGDP.csv")
download.file(fileAddress, "data/FGDP.csv", method="curl")
fileAddress <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileAddress, "data/FGDP.csv")
download.file(fileAddress, "FGDP.csv")
file.list()
list.files()
list.files(".csv")
list.files("(*.csv")
list.files("(*.jpg")
list.files("*.jpg")
list.files()
fileAddress <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
gcpDat<-red.csv("FGDP.csv")
gcpDat<-read.csv("FGDP.csv")
head gcpDat
head(gcpDat)
install.packages(c("Hmisc", "xtable"))
getwd()
fileAddress <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileAddress, "data/FGDP.csv", method = "curl")
gdpDat <- read.csv("data/FGDP.csv", skip = 3)
head(gpdDat)
head(gdpDat)
head(gdpDat[, c(-3,-6,-7,-8,-9,-10)])
fileAddress <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileAddress, "data/jeff.jpg", method = "curl")
download.file(fileAddress, "data/jeff.jpg", method = "curl")
jpegDat <- readJPEG("data/jeff.jpg", native = TRUE)
library(jpeg)
jpegDat <- readJPEG("data/jeff.jpg", native = TRUE)
str(jpegDat)
fileAddress <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileAddress, "data/FGDP.csv", method = "curl")
gdpDat <- read.csv("data/FGDP.csv")
head(gpdDat)
head(gdpDat)
nrow(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=3)
nrow(gdpDat)
head(gdpDat)
gdpDat <- gdpDat[, c(-3,-6,-7,-8,-9,-10)]
head(gdpDat)
nrow(gdpDat)
complete.cases(gdpDat)
fileAddress <-
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
fileAddress <-
"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
fileAddress <-     "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
fileAddress
download.file(fileAddress, "data/FEDSTATS_Country.csv", method = "curl")
edDat <- read.csv("data/FEDSTATS_Country.csv")
head(eDat)
head(edDat)
library(plyr)
head(gdpDate)
head(gdpDat)
mergeDat <- merge(x = gdpDat, y = edDat, by.x = "X", by.y = "CountryCode")
mergeDat <- mergeDat[mergeDat$Ranking %in% 1:190, ]
tail(mergeDat)
tail(mergeDat$Ranking)
mergeDat$Rankings
mergeDat$Ranking
summary(mergeDat$Ranking)
summary(mergeDat$Ranking,is.na=T)
mergeDat$Ranking <- as.numeric(levels(mergeDat$Ranking))[mergeDat$Ranking]
mergeDatSort <- arrange(mergeDat, Ranking, decreasing = TRUE)
head(mergeDatSort, 13)
mergeDataSort[13,]
mergeDatSort[13,]
mergeDat <- merge(x = gdpDat, y = edDat, by.x = "X", by.y = "CountryCode")
mergeDatSort[13,]
mergeDatSort <- arrange(mergeDat, Ranking, decreasing = TRUE)
mergeDat <- merge(x = gdpDat, y = edDat, by.x = "X", by.y = "CountryCode")
View(gdpDat)
str(gdpDat)
summary(gdpDat)
summary(jpegDat)
str(jpefDat)
str(jpegDat)
seq(1,10),by=2
seq(1,10,by=2)
seq(1,10,length=3)
restData<-read.csv("/data/restaurant.csv")
list.files("data")
restData<-read.csv("/data/restaurants.csv")
restData<-read.csv("data/restaurants.csv")
restData$nearMe = restData$neighborhood %in% c("Roland Park","Homeland")
table(restData$nearMe)
quantile(restData$zipCode)
library(Hmisc)
restData$zipGroup = cut2(restData$zipCode,g=4)
View(restData)
rm(list<-ls())
rm(list=ls())
library(reshape2)
head(mtcars)
nrow(mtcars)
mtcars$carname<-rownames(mtcars)
nrow(mtcars)
head(mtcars)
carMelt<-melt(mtcars,id=c("carname","gear","cyl"),measure.vars=("mpg","hp"))
carMelt<-melt(mtcars,id=c("carname","gear","cyl"),measure.vars=c("mpg","hp"))
head(InsectSprays)
count spray
count(sparay)
count(spray)
??acast
acast(InsectSprays)
gdpDat <- read.csv("data/FGDP.csv", skip=3)
View(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=4)
View(dpDat)
View(gdpDat)
numcols(gdpDat)
numcol(gdpDat)
count names(gdpDat)
count(names(gdpDat))
length(names(gdpDat))
gdpDat <- read.csv("data/FGDP.csv", skip=4. colClasses=c(1,2,4,5))
gdpDat <- read.csv("data/FGDP.csv", skip=4, colClasses=c(1,2,4,5))
gdpDat <- read.csv("data/FGDP.csv", skip=4, colClasses=c(NA,NA,"NULL",NA,NA))
gdpDat <- read.csv("data/FGDP.csv", skip=4, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
View(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=4, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)),header=T)
head(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=4, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
head(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
head(gdpDat)
gdpDat <- complete.cases(read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5))))
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
head(gdpDat)
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
head(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
table(gdpDat$Rankings)
gdpDat$Rankings
table(gdpDat$Ranking)
summary(gdpDat)
str(gdpDat)
quantile(gdpDat$Rankig)
quantile(gdpDat$Rankig,na.rm=T)
unique(gdpDat$Ranking)
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
edDat<-read.csv("file.choose())
)]
edDat<-read.csv(file.choose())
)
)
\
edDat<-read.csv(file.choose())
head edDat
head(edDat)
names(edDat)
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
library(plyr)
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
mergeDatSort[13,]
head(mergeDatSort,13)
mergeDatSort[13,c(1,2)]
mergeDatSort[13,c(1,2,3)]
head merrgeDatSort
head(merrgeDatSort)
head(mergeDatSort)
View(mergeDatSort)
mergeDatSort<-arrange(mergeDat,as.numeric(Ranking),decreasing=T)
View(mergeDatSort)
mergeDatSort<-arrange(mergeDat,as.numeric(levels(Ranking),decreasing=T)
)
mergeDatSort<-arrange(mergeDat,as.numeric(levels(Ranking)),decreasing=T)
as.numeric(levels(rdpDat$Ranking))
as.numeric(levels(gdpDat$Ranking))
count(as.numeric(levels(gdpDat$Ranking)))
as.numeric(levels(gdpDat$Ranking))
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
gdpDat$Ranking<-is.numeric(levels(gdpDat$Ranking))
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
library(plyr)
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
head(megeDataSort[c(1,2,3)])
head(mergeDataSort[c(1,2,3)])
head(mergeDatSort[c(1,2,3)])
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat$Ranking<-as.numeric(levels(gdpDat$Ranking))
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
gdpDat$Ranking<-as.numeric(levels(gdpDat$Ranking))
unique(gdpDat$Ranking)
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
mergeDat$Ranking<-as.numeric(levels(mergeDat$Ranking))
mergeDat$Ranking<-as.numeric(levels(mergeDat$Ranking))[mergeDat$Ranking]
as.numeric(levels(mergeDat$Ranking))
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
as.numeric(levels(gdpDat$Ranking))
head(gdpDat)
tail(gdpDat)
library(plyr)
head(arrange(gdpDat,as.numeric(levels(Ranking),decreasing=T))
)
head(arrange(gdpDat,as.numeric(levels(gdp$Ranking),decreasing=T))
)
head(arrange(gdpDat,as.numeric(levels(gdpDat$Ranking),decreasing=T)))
mergeDat$Ranking<-as.numeric(levels(mergeDat$Ranking))[mergeDat$Ranking]
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
head(mergeDatSort)
head(mergeDatSort[c(1,2,3,4)])
unique(mergeDat$Ranking)
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)))
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
head(gdpDatg)
head(gdpDat)
tail(gdpDat)
gdpDat[178,]
gdpDat[177,]
gdpDat[179,]
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
head(mergeDat[c(1,2,3)])
head(mergeDat[order(-Ranking),c(1,2,3)]
)
head(mergeDat[order(-Ranking)]
)
head(mergeDat[order(-Ranking)],)
head(mergeDat[order(-Ranking),],)
head(mergeDat[order(-Ranking),])
attach(mergeDat)
head(mergeDat[order(-Ranking),c(1,2,3)])
head(mergeDat[order(-as.numeric(levels(Ranking)),c(1,2,3)])
as.numeric(levels(mergeDat$Ranking))
length(as.numeric(levels(mergeDat$Ranking)))
head(megeDat)
head(mergeDat)
head(mergeDat[c(1,2,3)])
gdpDat
as.matrix(gdpDat)
as.numeric(mergeDat$Ranking)
-as.numeric(mergeDat$Ranking)
gdpData[order(-as.numeric(Ranking)),]
gdpDat[order(-as.numeric(Ranking)),]
head(gdpDat[order(-as.numeric(Ranking)),])
head(gdpDat[order(-as.numeric(as.character(Ranking)),])
head(gdpDat[order(-as.numeric(as.character(Ranking))),])
library(plyr)
head(arrange(gdpDat,as.numeric(Ranking),decreasing=T))
tail(arrange(gdpDat,as.numeric(Ranking),decreasing=T))
head(arrange(gdpDat,as.numeric(as.character(Ranking),decreasing=T))
)
head(arrange(gdpDat,as.numeric(as.character(Ranking)),decreasing=T))
tail(arrange(gdpDat,as.numeric(as.character(Ranking)),decreasing=T))
summary(gdpDat)
str(gdpDat)
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)),stringsAsFactors=F)
str(gdpDat)
str(eDat)
str(edDat)
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
tail(arrange(gdpDat,as.numeric(Ranking),decreasing=T))
head(arrange(gdpDat,as.numeric(Ranking),decreasing=T))
mergeDatSort<-arrange(mergeDat,as.numeric(Ranking),decreasing=T))
mergeDatSort<-arrange(mergeDat,as.numeric(Ranking),decreasing=T)
head(mergeDatSort(c(1,2,3)))
head(mergeDatSort[(c(1,2,3)])
head(mergeDatSort[c(1,2,3)])
mergeDatSort[13,c(1,2,3)]
ddply(mergeDat, ~Income.Goup, summarize, meanGdpRank=mean(Ranking))
neames(mergeDat)
names(mergeDat)
ddply(mergeDat, ~Income.Group, summarize, meanGdpRank=mean(Ranking))
ddply(mergeDat, ~Income.Group, summarize, meanGdpRank=mean(as.numeric(Ranking))
)
quantilea(numeric(mergeDat$Ranking),seq(0,1,0.2))
quantile(numeric(mergeDat$Ranking),seq(0,1,0.2))
quantile(as.numeric(mergeDat$Ranking),seq(0,1,0.2))
quantile(as.numeric(mergeDat$Ranking),5
)
quantile(as.numeric(mergeDat$Ranking),5)
quantile(as.numeric(mergeDat$Ranking),seq(0,1,0.2))
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)),stringsAsFactors=F)
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
edDat<-read.csv(file.choose())
gdpDat <- read.csv("data/FGDP.csv", skip=3, colClasses=c(NA,NA,"NULL",NA,NA,rep("NULL",5)),stringsAsFactors=F)
gdpDat<-gdpDat[gdpDat$Ranking %in% 1:190,]
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
gdpDat$Ranking <- as.numeric(gdpDat$Ranking)
str(gdpDat)
mergeDat<-merge(x=gdpDat,y=edDat,by.x="X", by.y="CountryCode")
mergeDat[order(-Ranking),]
str(mergeDat)
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
library(plyr)
mergeDatSort<-arrange(mergeDat,Ranking,decreasing=T)
head(mergeDatSort[c(1,2,3)])
arrange(mergeDat,Ranking,decreasing=T)[13,]
arrange(mergeDat,Ranking,decreasing=T)[13,c(2,3)]
nrow(mergeDat)
nrow(mergeDat)
arrange(mergeDat,Ranking,decreasing=T)[13,c(2,3)]
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "data/acs.csv", method = "curl")
acs <- read.csv("data/acs.csv")
agricultureLogical<-(acs$ACR==3 & acs$AGS==6)
which(agricultureLogical)
which(agricultureLogical)[1:3]
class(agricultureLogical)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, destfile = "data/gdp.csv", method = "curl")
img<-readJPEG("data/jeff.jpg",native=T)
library(jpeg)
img<-readJPEG("data/jeff.jpg",native=T)
quantile(img,probs=c(0.3,0.8))
summary(mergeDat)
ddply(mergeDat, ~ Income.Group, summarize, meanGdpRank = mean(Ranking))
dcast(mergeDat, Ranking ~ variable,mean)
library(reshape)
library(reshape2)
dcast(mergeDat, Ranking ~ variable,mean)
dcast(mergeDat, Ranking ~ Income.Group,mean)
dcast(mergeDat, Income.Group ~ Ranking,mean)
tapply(mergeDat$Ranking,mergeDat$Income.Group,mean)
1/5
mergeDat[order(-Ranking),]
mergeDat[order(-mergeDat$Ranking),]
mergeDat[order(-mergeDat$Ranking),][1:3]
mergeDat[order(-mergeDat$Ranking),c(2,3)][13,]
mergeDat[order(-mergeDat$Ranking)[13],c(2,3)]
q <- quoantile(mergeDat$Ranking, seq(0,1,1/5))
q <- quantile(mergeDat$Ranking, seq(0,1,1/5))
q
q <- quantile(mergeDat$Ranking, seq(0,1,0.2))
q
q <- quantile(mergeDat$Ranking, seq(0,1,0.3))
q
q <- quantile(mergeDat$Ranking, seq(0,1,0.25))
q
q <- quantile(mergeDat$Ranking)
q
table(q, mergeDat$Ranking)
q <- quantile(mergeDat$Ranking, seq(0,1,0.2))
table(q, mergeDat$Ranking)
q <- quantile(mergeDat$Ranking)
q
summary(mergedData[mergedDat$Income.Group=="High income: OECD",])
summary(mergedDat[mergedDat$Income.Group=="High income: OECD",])
summary(mergeDat[mergeDat$Income.Group=="High income: OECD",])
library(Hmisc)
table(mergeDat$Income.Group,cut2(quantile(mergeDat$Ranking,seq(0,1,1/5)),g=5))
cut2(quantile(mergeDat$Ranking,seq(0,1,1/5)),g=5)
quantile(mergeDat$Ranking,seq(0,1,1/5))
quantile(mergeDat$Ranking,probs=c(0.2,0.4,0.6.0.8,1))
quantile(mergeDat$Ranking,probs=c(0.2,0.4,0.6,0.8,1))
q <- quantile(mergeDat$Ranking,probs=c(0.2,0.4,0.6,0.8,1))
table(mergeDat$Income.Group,)
mergeDat$Gross.domestic.product.2012 = as.numeric(mergeDat$Gross.domestic.product.2012)
names(mergeDat)
cut2(mergeDat$Ranking,g-5)
cut2(mergeDat$Ranking,g=5)
table(mergeDat$Income.Group,cut2(mergeDat$Ranking,g=5))
source.with.encoding('~/data/UCI HAR Dataset/run_analysis.R', encoding='UTF-8')
